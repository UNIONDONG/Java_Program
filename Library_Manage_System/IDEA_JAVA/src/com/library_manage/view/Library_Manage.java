package com.library_manage.view;

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import com.library_manage.dao.User_DAO;
import com.library_manage.model.User;
import com.library_manage.util.DbUtil;
import com.library_manage.util.StringUtil;


import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.sql.Connection;

/**
 * @Description: 图书管理类
 * @Author: Dong
 * @CreateDate: 2018/11/20 11:13
 * @UpdateUser: Dong
 * @UpdateDate: 2018/11/20 11:13
 * @UpdateRemark: 修改内容
 * @Version: 1.0
 */
public class Library_Manage {
    private JPanel Lib_Man;
    private JLabel BMS;
    private JTextField User_Text;
    private JPasswordField Pswd_In;
    private JLabel User_Name;
    private JLabel Pswd_L;
    private JButton Log_in;
    private JButton Reset;
    private DbUtil dbUtil = new DbUtil();           //连接数据库用
    private User_DAO userdao = new User_DAO();      //创建用户
    private JFrame frame;
    protected Main_Gui main_gui;

    /**
     * @param null
     * @return null
     * @throws null
     * @Description: 构造函数，创建监控事件
     * @author Dong
     * @date 2018/11/28 15:55
     */
    public Library_Manage() {
        //登录
        Log_in.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                loginActionPerformd(e);
            }
        });
        //重置
        Reset.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                resetValueActionPerformd(e);
            }
        });
    }

    /**
     * @param String
     * @return null
     * @throws null
     * @Description: 重构构造函数，创建窗口，
     * @author Dong
     * @date 2018/11/28 15:57
     */
    public Library_Manage(String str) {
        frame = new JFrame(str);
        frame.setContentPane(Lib_Man);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        //登录
        Log_in.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                loginActionPerformd(e);
            }
        });
        //重置
        Reset.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                resetValueActionPerformd(e);
            }
        });
    }

    /**
     * @param String[]
     * @return null
     * @throws null
     * @Description: 主方法
     * @author Dong
     * @date 2018/11/28 15:58
     */
    public static void main(String[] args) {
        Library_Manage library_manage = new Library_Manage("图书管理系统");
    }

    /**
     * @param ActionEvent
     * @return null
     * @throws null
     * @Description: 重置方法
     * @author Dong
     * @date 201 8/11/28 15:59
     */
    private void resetValueActionPerformd(ActionEvent e) {
        this.User_Text.setText("");
        this.Pswd_In.setText("");
    }

    /**
     * @param ActionEvent
     * @return null
     * @throws null
     * @Description: 登陆方法
     * @author Dong
     * @date 2018/11/28 15:59
     */
    private void loginActionPerformd(ActionEvent e) {
        String user_name = this.User_Text.getText();            //得到输入的数据
        String user_password = new String(this.Pswd_In.getPassword());
        if (StringUtil.isEmpty(user_name)) {                    //判断是否为空
            JOptionPane.showMessageDialog(null, "用户名不能为空!");
            return;
        }
        if (StringUtil.isEmpty(user_password)) {
            JOptionPane.showMessageDialog(null, "密码不能为空！");
            return;
        }
        User user = new User(user_name, user_password);
        Connection con = null;
        try {
            con = dbUtil.getCon();                              //连接数据库
            User current_user = userdao.login(con, user);       //验证用户是否存在
            if (current_user != null) {                         //连接上
                main_gui = new Main_Gui();
                //frame.setVisible(false);                      //隐藏窗口
                frame.dispose();
                JOptionPane.showMessageDialog(null, "登陆成功!");
            } else {
                JOptionPane.showMessageDialog(null, "登陆失败!");
            }
        } catch (Exception ee) {
            ee.printStackTrace();
        } finally {
            try {
                dbUtil.closeCon(con);
            } catch (Exception ee) {
                ee.printStackTrace();
            }
        }

    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        Lib_Man = new JPanel();
        Lib_Man.setLayout(new com.jgoodies.forms.layout.FormLayout("fill:204px:grow,left:99dlu:noGrow,fill:58px:grow", "center:77px:noGrow,top:34dlu:noGrow,center:28px:noGrow,top:4dlu:noGrow,center:41px:noGrow,top:4dlu:noGrow,center:124px:noGrow"));
        Font Lib_ManFont = this.$$$getFont$$$(null, -1, -1, Lib_Man.getFont());
        if (Lib_ManFont != null) Lib_Man.setFont(Lib_ManFont);
        Lib_Man.setMaximumSize(new Dimension(48, 17));
        Lib_Man.setMinimumSize(new Dimension(293, 101));
        BMS = new JLabel();
        Font BMSFont = this.$$$getFont$$$("Freestyle Script", Font.BOLD, 36, BMS.getFont());
        if (BMSFont != null) BMS.setFont(BMSFont);
        BMS.setForeground(new Color(-14563276));
        BMS.setHorizontalAlignment(0);
        BMS.setHorizontalTextPosition(4);
        BMS.setIcon(new ImageIcon(getClass().getResource("/image/book2.png")));
        BMS.setText("Books Management System");
        BMS.setVerticalAlignment(0);
        com.jgoodies.forms.layout.CellConstraints cc = new com.jgoodies.forms.layout.CellConstraints();
        Lib_Man.add(BMS, cc.xyw(1, 1, 3, com.jgoodies.forms.layout.CellConstraints.DEFAULT, com.jgoodies.forms.layout.CellConstraints.BOTTOM));
        User_Name = new JLabel();
        Font User_NameFont = this.$$$getFont$$$(null, Font.BOLD, 14, User_Name.getFont());
        if (User_NameFont != null) User_Name.setFont(User_NameFont);
        User_Name.setHorizontalAlignment(4);
        User_Name.setHorizontalTextPosition(4);
        User_Name.setIcon(new ImageIcon(getClass().getResource("/image/user.png")));
        User_Name.setMaximumSize(new Dimension(100, 100));
        User_Name.setText("用户名：");
        User_Name.setVerticalAlignment(0);
        Lib_Man.add(User_Name, cc.xy(1, 3, com.jgoodies.forms.layout.CellConstraints.CENTER, com.jgoodies.forms.layout.CellConstraints.CENTER));
        User_Text = new JTextField();
        Lib_Man.add(User_Text, cc.xy(2, 3, com.jgoodies.forms.layout.CellConstraints.FILL, com.jgoodies.forms.layout.CellConstraints.DEFAULT));
        Pswd_In = new JPasswordField();
        Pswd_In.setText("");
        Lib_Man.add(Pswd_In, cc.xy(2, 5, com.jgoodies.forms.layout.CellConstraints.FILL, com.jgoodies.forms.layout.CellConstraints.TOP));
        Pswd_L = new JLabel();
        Font Pswd_LFont = this.$$$getFont$$$(null, Font.BOLD, 14, Pswd_L.getFont());
        if (Pswd_LFont != null) Pswd_L.setFont(Pswd_LFont);
        Pswd_L.setHorizontalAlignment(10);
        Pswd_L.setHorizontalTextPosition(4);
        Pswd_L.setIcon(new ImageIcon(getClass().getResource("/image/password.png")));
        Pswd_L.setMaximumSize(new Dimension(100, 100));
        Pswd_L.setText("密码：");
        Pswd_L.setVerticalAlignment(0);
        Lib_Man.add(Pswd_L, cc.xy(1, 5, com.jgoodies.forms.layout.CellConstraints.CENTER, com.jgoodies.forms.layout.CellConstraints.TOP));
        Reset = new JButton();
        Font ResetFont = this.$$$getFont$$$(null, Font.BOLD, -1, Reset.getFont());
        if (ResetFont != null) Reset.setFont(ResetFont);
        Reset.setIcon(new ImageIcon(getClass().getResource("/image/Restart.png")));
        Reset.setText("重置");
        Lib_Man.add(Reset, new com.jgoodies.forms.layout.CellConstraints(2, 7, 1, 1, com.jgoodies.forms.layout.CellConstraints.CENTER, com.jgoodies.forms.layout.CellConstraints.TOP, new Insets(0, 0, 0, 40)));
        Log_in = new JButton();
        Font Log_inFont = this.$$$getFont$$$(null, Font.BOLD, -1, Log_in.getFont());
        if (Log_inFont != null) Log_in.setFont(Log_inFont);
        Log_in.setHideActionText(true);
        Log_in.setIcon(new ImageIcon(getClass().getResource("/image/login.png")));
        Log_in.setText("登陆");
        Lib_Man.add(Log_in, new com.jgoodies.forms.layout.CellConstraints(1, 7, 1, 1, com.jgoodies.forms.layout.CellConstraints.CENTER, com.jgoodies.forms.layout.CellConstraints.TOP, new Insets(0, 100, 0, 0)));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return Lib_Man;
    }

}
